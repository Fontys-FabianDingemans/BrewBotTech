#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <FastLED.h>

using namespace websockets;

// Websocket declarations
WebsocketsClient wss_client;
DynamicJsonDocument wss_res(220);
bool wss_msg_received = false;
bool wss_connected = false;

// Static var declarations
const String ssid = "BrewBot";
const String password = "BrewBotHotspot";
bool wifi_connecting = false;

const String wss_host = "ws://145.220.74.183";
const String wss_path = "/socket.io";
const int wss_port = 34535;
const String wss_token = "2ZJQrLFrLB2zvx.4WLqWJZ-MoepVn384hcvDTvCc";

const int sensorPin = D0;
const int pump1Pin = D5;
const int pump2Pin = D6;
const int pump3Pin = D7;

#define LED_PIN D3
#define NUM_LEDS 8
CRGB leds[NUM_LEDS];

const int TAP_TIME_MS = 5000;

#define OLED_RESET -1
Adafruit_SSD1306 display(128, 64, &Wire, OLED_RESET);
const unsigned char myBitmap [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x0c, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x78, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x07, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x07, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x07, 0xff, 0x90, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x04, 0x0f, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0e, 0x0f, 0xcf, 0x38, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x09, 0xa6, 0x04, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0d, 0xa6, 0x14, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0x80, 0x09, 0x8f, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x04, 0x20, 0x0f, 0xff, 0x10, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x0c, 0x40, 0x07, 0xff, 0x80, 0x08, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x11, 0x00, 0x07, 0xff, 0xf0, 0x0c, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x31, 0x40, 0x07, 0xff, 0xf0, 0x1e, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x02, 0x80, 0x43, 0xdf, 0xe0, 0x08, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0x90, 0x02, 0xdf, 0xc0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0x18, 0x02, 0xff, 0x80, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xd8, 0x01, 0xfe, 0x1c, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xac, 0x00, 0xf8, 0x3f, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0x8c, 0x00, 0x00, 0x78, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xf8, 0x68, 0x00, 0x81, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe3, 0x81, 0xc8, 0x03, 0xdf, 0xc3, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe3, 0x07, 0x88, 0x07, 0xff, 0x87, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc1, 0x8c, 0x08, 0x07, 0xff, 0x0f, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0xf8, 0x08, 0x2f, 0xff, 0x0c, 0x30, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x60, 0x00, 0xcf, 0xff, 0x0b, 0x90, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x5a, 0x4f, 0xbf, 0x07, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0x0f, 0x3f, 0x07, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xff, 0x0f, 0xff, 0x03, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xfa, 0x07, 0xff, 0x0c, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xe0, 0x01, 0xff, 0x0f, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x80, 0xe3, 0x78, 0x0f, 0x8f, 0x80, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xe0, 0x7d, 0x60, 0x1c, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xe7, 0x3d, 0x7f, 0x0f, 0x20, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xe0, 0x39, 0x7f, 0x81, 0x20, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xe3, 0x7b, 0x7f, 0xbc, 0x60, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xe0, 0x12, 0x7f, 0xa0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0x00, 0xff, 0x2d, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7e, 0x00, 0x3f, 0x52, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x01, 0x07, 0x4e, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0xc0, 0x64, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x80, 0x31, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x40, 0x1e, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0x00, 0x60, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0x00, 0x20, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0x81, 0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x01, 0x00, 0x00, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Function declarations
bool tab_beer(String type);
void sendWssMessage(String action, String type, int user_id);

void geel(){
  for(int i=0;i<NUM_LEDS;i++)
  leds[i] = CRGB (204,0, 150);
  FastLED.show();
}

// Websocket callbacks
void onMessageCallback(WebsocketsMessage message) {
    if(wss_msg_received) return;

    DeserializationError wss_error = deserializeJson(wss_res, message.data());
    if (wss_error) {
        Serial.print(F("Error parsing JSON: "));
        Serial.println(wss_error.c_str());
        wss_msg_received = false;
        return;
    }

    String action = wss_res["action"];
    if(action == "activate") {
      wss_msg_received = true;
    }
}

void onEventsCallback(WebsocketsEvent event, String data) {
    if(event == WebsocketsEvent::ConnectionOpened) {
        Serial.println("WSS: Connnection Opened");
        wss_connected = true;
    } else if(event == WebsocketsEvent::ConnectionClosed) {
        Serial.println("WSS: Connnection Closed");
        wss_connected = false;
    } else if(event == WebsocketsEvent::GotPing) {
        Serial.println("WSS: Got a Ping!");
    } else if(event == WebsocketsEvent::GotPong) {
        Serial.println("WSS: Got a Pong!");
    }
}

void connectToWiFi() {
  if(wifi_connecting) return;

  wifi_connecting = true;

  //Connect to WiFi Network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to WiFi");
  Serial.println("...");
  WiFi.begin(ssid, password);
  
  int retries = 0;
  while ((WiFi.status() != WL_CONNECTED) && (retries < 1000)) {
    retries++;
    Serial.print(".");
    delay(200);
  }
  if (retries > 999) {
    Serial.println(F("WiFi connection FAILED"));

    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(0,20);
    display.println("Connecting");
    display.setCursor(0,40);
    display.println("FAILED");
    display.display();
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println(F("WiFi connected!"));
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());

    // Connected to WiFi Network
    wifi_connecting = false;
  }
}

void connectToWss(){
  if(wss_connected) return;

  // Connect to server
  String server_url = wss_host + ":" + wss_port + wss_path;
  wss_client.connect(server_url);
}

// Setup
void setup()
{
  Serial.begin(115200);

  // Define pin modes
  pinMode(sensorPin, INPUT);
  pinMode(pump1Pin, OUTPUT);
  pinMode(pump2Pin, OUTPUT);
  pinMode(pump3Pin, OUTPUT);

  FastLED.addLeds<WS2812, LED_PIN, GRB>(leds, NUM_LEDS);
  geel();

  // Turn off pumps
  digitalWrite(pump1Pin, HIGH);
  digitalWrite(pump2Pin, HIGH);
  digitalWrite(pump3Pin, HIGH);

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.drawBitmap(0, 0, myBitmap, 128, 64, WHITE);
  display.display();

  delay(1000);

  // Connect to Wi-Fi
  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0,20);
  display.println("Connecting");
  display.setCursor(0,40);
  display.println("to WiFi");
  display.display();

  connectToWiFi();

  // Setup Callbacks
  wss_client.onMessage(onMessageCallback);
  wss_client.onEvent(onEventsCallback);
  
  // Connect to server
  connectToWss();

  if(WiFi.status() != WL_CONNECTED) return;
  Serial.println(F("BrewBot is ready!"));
  
  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0,20);
  display.println("BrewBot");
  display.setCursor(0,40);
  display.println("is ready!");
  display.display();
}

// Loop
void loop() {
  if(WiFi.status() != WL_CONNECTED && wss_connected){
    connectToWiFi();
    return;
  }

  connectToWss();
  wss_client.poll();

  if (!wss_msg_received) return;

  String action = wss_res["action"];
  String type = wss_res["type"];
  String to = wss_res["to"];
  int user_id = (int)wss_res["user_id"];

  if (action == "activate" && to == "brewbot_machine_1"){
    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(0,20);
    display.println("Waiting");
    display.setCursor(0,40);
    display.println("for glass");
    display.display();

    int glassPresent = digitalRead(sensorPin);
    while(glassPresent == HIGH)
    {
      glassPresent = digitalRead(sensorPin);
      Serial.println("Waiting for glass");
      delay(200);
    }
    display.clearDisplay();

    bool success = tab_beer(type);
    if(success){
      sendWssMessage("completed", type, user_id);
      Serial.println("Beer tapped");
    }

    int glassRemoved = digitalRead(sensorPin);
    while(glassRemoved == LOW)
    {
      glassRemoved = digitalRead(sensorPin);
      Serial.println("Waiting for glass to be removed");

      display.clearDisplay();
      display.setTextSize(2);
      display.setCursor(0,20);
      display.println("Remove");
      display.setCursor(0,40);
      display.println("glass");
      display.display();

      delay(200);
    }

    Serial.println("Glass removed");

    wss_msg_received = false;
    Serial.println("Ready for next beer");

    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(0,20);
    display.println("BrewBot");
    display.setCursor(0,40);
    display.println("is ready!");
    display.display();
  }
}

bool tab_beer(String type)
{
  int beerPin;
  if(type == "zero"){
    beerPin = pump1Pin;
  }else if(type == "normal"){
    beerPin = pump2Pin;
  }else if(type == "special"){
    beerPin = pump3Pin;
  }else{
    Serial.println("Invalid beer type");
    return false;
  }


  digitalWrite(beerPin, LOW);
  Serial.println("Tapping started");

  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0,5);
  display.println("Tapping:");
  display.setCursor(0,25);
  display.println("Starting");
  display.display();

  int progress_percentage = 0;
  int blink_time = 300;
  int blink_count = TAP_TIME_MS / blink_time;
  for (int i = 0; i < blink_count; i++)
  {
    progress_percentage = map(i, 0, blink_count, 0, 100);

    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(0,5);
    display.println("Tapping:");
    display.setCursor(0,25);
    display.println(String(progress_percentage) + "%");
    display.display();

    delay(blink_time);

    int glassRemoved = digitalRead(sensorPin);
    if(glassRemoved == HIGH){
      Serial.println("Tapping stopped: Glass removed");

      display.clearDisplay();
      display.setTextSize(2);
      display.setCursor(0,6);
      display.println("Tapping:");
      display.setCursor(0,25);
      display.println("Glass");
      display.setCursor(0,45);
      display.println("Removed");
      display.display();

      digitalWrite(beerPin, HIGH);
      
      return false;
    }
  }
  
  digitalWrite(beerPin, HIGH);
  Serial.println("Tapping stopped: Completed");

  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0,5);
  display.println("Tapping:");
  display.setCursor(0,25);
  display.println("Completed");
  display.display();
  
  return true;
}

void sendWssMessage(String action, String type, int user_id){
  DynamicJsonDocument wss_req(200);
  wss_req["action"] = action;
  wss_req["to"] = "server";
  wss_req["type"] = type;
  wss_req["user_id"] = user_id;

  wss_req["headers"] = JsonObject();
  wss_req["headers"]["x-auth-token"] = wss_token;

  String wss_req_str;
  serializeJson(wss_req, wss_req_str);
  wss_client.send(wss_req_str);
}